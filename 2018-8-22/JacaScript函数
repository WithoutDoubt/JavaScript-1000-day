//函数定义

function abs(x) {                         // 函数定义1
    ...
    return x;
}

function abs = function (x){              // 函数定义2  匿名函数  abs为变量
    ...
    return x;
};

                                          //调用函数
arguments                                 //判断函数传入的参数个数
rest                                      //

function foo (...rest){                   //不管多少参数，都自动存入rest数组中

}

//变量提升  ，先将所有声明的变量“提升”到函数顶部
function foo(){
    var                                    //声明所有用到的变量
        x = 1;
        y = x + 1;
        z,i;
    for (i = 0; i < 100;i++){
        ...
    }
}

//全局作用域  ，不在任何函数内定义的变量就具有全局作用域。默认绑定到全局对象windows上

alert();      //就是window的一个变量
window.alert('A');


//名字空间   全局变量会绑定到window上，不同的js文件会有冲突，可以把自己所有变量和函数全部绑定到一个全局变量中。
//          许多著名的JavaScript库就是怎么干的，比如jQuery
var MYAPP = {};
MYAPP.name = '';
MYAPP.verison = 1.0;

MYAPP.foo = function(){

};

//局部作用域  需要使用let去声明，一个块级作用域  【ES6】
for(let i =0 ; i < 100 ; i++){
    sum += i;
}

//常量 const定义常量，和let都具有块级作用域  【ES6】
const PI = 3.14；

//解构赋值                                   【ES6】
var[x , y , z] = ['hello' , 'java' , 'es6'];

var person = {};                              //从某个对象中快速获取对象指定属性
var {name  , age , passport} = person;        //name,age,passport分别被赋值为对应属性

var {hostname:domain , pathname:path} = location; // 快速获得当前页面的域名和路径。hostname赋值给domain，pathname赋值给path

buildDate（{year:2017,month:1,day:1}）      //函数解构赋值


//==============================超级大坑，this指向谁=======================================//
var xiaoming = {
    name:'小明',
    birth:1990,
    age: function () {
        var y = new Date().getFullYear();
        return y - this.birth;               //this
    }
}
 
 var xiaoming = {                                           //要保证this指向正确，必须用obj.xxx()形式调用
    name:'小明',
    birth:1990,
    age:function () {
        var that = this;                                    //捕获this
        function getAgeFromBirth() {
            var y = new Date().getFullYear();
            return y - that.birth;
   }
     return getAgeFromBirth();
}
};

function getAge() {                                                              //指定函数的this指向哪个对象，可以用函数本身的apply方法，
    var y = new Date().getFullYear();
    return y - this.birth;
}

var xiaoming = {
    name:'小明',
    birth:1990,
    age:getAge
};

xiaoming.age();                                                                  //25
getAge.apply(xiaoming , []);                                                     //this 指向 xiaoming  参数    
                                                                                //apply有两个参数（this变量，函数本身的参数，Array存储）

//apply对普通函数的调用
Math.max.apply(null , [3,5,4]);                                                 // this 绑定 null，表示普通调用 
Math.max.call(null , 3 , 5 , 4);                                                //

//=======================================================高阶函数===========================//
function add(x , y , f){                               //函数接受函数为变量
    return f(x) + f(y);
}

function pow(x) {                                     //array里面的map函数，就是可以接受pow函数
    return x*x;
}
var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
var results = arr.map(pow);                           //
arr.map(String);                                      //将所有数字变成字符串

function product(arr) {                              
    return arr.reduce(function (x,y){                //reduce,对数组里面数字进行累积操作
        return x * y;
    });
}

[1,2,3].map(parseInt)                              //map和parseInt在一起有问题

arr.fliter(function x)                             //filter 滤过  通过true和false来返回函数的。

sort()                                             // 默认 x < y 返回-1 ； x > y 返回1； x==y 返回 0；sort会对array直接修改
                                                   
/*============================================函数作为返回值======================================================*/
function lazy_sum(arr) {                            //闭包
    var sum = function () {                         //返回的是求和函数
        return arr.reduce(function (x,y){
            return x + y;    
        });
    }
    return sum;
}
var f = lazy_sum([1,2,3,4,5]);
f();                                                 // 15

//箭头函数
//generator




